{"version":3,"sources":["component/VisualTools/Chart/Histogram.js"],"names":["Histogram","data","fields","id","binsCount","filterData","filters","filterAdded","svgRef","useRef","useState","x","d3","scaleLinear","y","Scales","hist","histogram","bins","margin","useEffect","setTimeout","console","log","rect","current","getBoundingClientRect","innerWidth","width","innerHeight","height","svg","select","append","attr","domain","max","d","range","value","thresholds","ticks","length","brush","brushX","extent","on","event","selection","x0","x1","field","operation","values","numFixed","invert","call","axisBottom","axisLeft","selectAll","join","Math","style","transition","duration"],"mappings":"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","file":"Histogram.f24ea592.js","sourceRoot":"../source","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { numFixed } from \"../../../common/utils.js\";\nimport * as d3 from \"d3\";\n\n/**\n * @function Histogram\n * @description Creates an interactive histogram chart\n *              User can select specific range of x by brushing\n * @param {Object} data - total data without filtering\n * @param {Array} fields - contains filed to creat histogram on\n * @param {String} id - HTML id for the chart\n * @param {Integer} binsCount - number of bins to split data on\n * @param {Object} filterData - data after applying filters \n * @param {Array} filters - current filters\n * @param {Function} filterAdded - handler for adding new filter\n * @returns {Component}\n */\n\nconst Histogram = ({\n  data,\n  fields,\n  id,\n  binsCount,\n  filterData,\n  filters,\n  filterAdded,\n}) => {\n  const svgRef = useRef();\n  const [Scales, setScales] = useState({\n    x: d3.scaleLinear(),\n    y: d3.scaleLinear(),\n  });\n  const [histogram, setHistogram] = useState({\n    hist: d3.histogram(),\n    bins: null,\n  });\n  const margin = { top: 10, right: 10, bottom: 30, left: 40 };\n\n  // initialize svg and draw base histogram\n  useEffect(() => {\n    setTimeout(() => {\n      console.log(\"what\");\n      let rect = svgRef.current.getBoundingClientRect();\n      const innerWidth = rect.width - margin.left - margin.right;\n      const innerHeight = rect.height - margin.top - margin.bottom;\n\n      const svg = d3\n        .select(svgRef.current)\n        .append(\"svg\")\n        .attr(\"width\", rect.width)\n        .attr(\"height\", rect.height)\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      Scales.x\n        .domain([\n          0,\n          d3.max(data, (d) => {\n            return d[fields.x];\n          }),\n        ])\n        .range([0, innerWidth]);\n\n      histogram.hist\n        .value((d) => d[fields.x])\n        .domain(Scales.x.domain())\n        .thresholds(Scales.x.ticks(binsCount));\n\n      histogram.bins = histogram.hist(data);\n\n      Scales.y = d3\n        .scaleLinear()\n        .range([innerHeight, 0])\n        .domain([0, d3.max(histogram.bins, (d) => d.length)]);\n\n      // brush\n      const brush = d3\n        .brushX()\n        .extent([\n          [0, 0],\n          [innerWidth, innerHeight],\n        ])\n        .on(\"end\", () => {\n          if (d3.event.selection) {\n            const [x0, x1] = [d3.event.selection[0], d3.event.selection[1]];\n            filterAdded([\n              {\n                id: id,\n                field: fields.x,\n                operation: \"range\",\n                values: [\n                  numFixed(Scales.x.invert(x0)),\n                  numFixed(Scales.x.invert(x1)),\n                ],\n              },\n            ]);\n          }\n        });\n      svg.append(\"g\").call(brush);\n\n      // draw x-axis\n      svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + innerHeight + \")\")\n        .call(d3.axisBottom(Scales.x));\n\n      // draw y-axis\n      const view = svg\n        .append(\"g\")\n        .call(d3.axisLeft(Scales.y))\n        .append(\"g\")\n        .attr(\"class\", \"hist-area\");\n\n      // draw histogram rectangles\n      view\n        .selectAll(\".bar\")\n        .data(histogram.bins)\n        .join(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", 1)\n        .attr(\"transform\", function (d) {\n          return \"translate(\" + Scales.x(d.x0) + \",\" + Scales.y(d.length) + \")\";\n        })\n        .attr(\"width\", function (d) {\n          return Math.max(Scales.x(d.x1) - Scales.x(d.x0) - 1, 0);\n        })\n        .attr(\"height\", function (d) {\n          return innerHeight - Scales.y(d.length);\n        })\n        .style(\"fill\", \"#87CEFA\");\n    }, 100);\n  }, []);\n\n  // draw filtered histogram\n  useEffect(() => {\n    setTimeout(() => {\n      const rect = svgRef.current.getBoundingClientRect();\n      const innerHeight = rect.height - margin.top - margin.bottom;\n\n      let bins = histogram.bins;\n      if (filters.length != 0) {\n        bins = histogram.hist(filterData);\n      }\n\n      d3.select(svgRef.current)\n        .selectAll(\".hist-area\")\n        .selectAll(\".bar-f\")\n        .data(bins)\n        .join(\"rect\")\n        .attr(\"class\", \"bar-f\")\n        .style(\"transform\", \"scale(1, -1)\")\n        .attr(\"x\", (d) => Scales.x(d.x0))\n        .attr(\"y\", (d) => -innerHeight)\n        .transition()\n        .duration(1000)\n        .attr(\"width\", function (d) {\n          return Math.max(Scales.x(d.x1) - Scales.x(d.x0) - 1, 0);\n        })\n        .attr(\"height\", function (d) {\n          return innerHeight - Scales.y(d.length);\n        })\n        .style(\"fill\", \"#4682B4\");\n    }, 100);\n  }, [filterData]);\n  return (\n    <div id={id} ref={svgRef} style={{ width: \"100%\", height: \"100%\" }}></div>\n  );\n};\n\nexport default Histogram;\n"]}