{"version":3,"sources":["component/VisualTools/Chart/ScatterChart.js"],"names":["PureComponent","ScatterChart","props","self","React","createRef","state","margin","top","right","bottom","left","loading","error","data","filter","d","fields","x","y","z","f","width","xScale","d3","scaleBand","domain","map","range","padding","scaleLiner","scaleLinear","extent","nice","filters","length","circles","attr","filterData","includes","setTimeout","rect","current","getBoundingClientRect","innerWidth","innerHeight","height","viewer","select","append","createScaleLiner","yScale","radiusScale","call","axisBottom","tickSize","axisLeft","selectAll","enter","brush","on","end","bind","brush_area","componentDidUpdate","event","selection","brush_coords","i","nodes","node","cx","cy","isBrushed","x0","y0","x1","y1","console","log","id","title","field","operation","values","invert","filterAdded","move"],"mappings":"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","file":"ScatterChart.c103e7bb.js","sourceRoot":"../source","sourcesContent":["import React, { PureComponent } from 'react'\nimport {numFixed} from '../../../common/utils.js'; \nimport * as d3 from \"d3\";\nexport default class ScatterChart extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.self = React.createRef();\n        this.state = {\n            margin: {top: 10, right: 10, bottom: 25, left: 40},\n            loading:true,\n            error:null\n        }\n        this.state.data = this.props.data.filter(d=> d[this.props.fields.x]!='N/A'&&d[this.props.fields.y]!='N/A'&&d[this.props.fields.z]!='N/A' )\n    }\n\n    createXScale(f,width) {\n        // set the ranges\n        const xScale = d3.scaleBand()\n            .domain(this.state.data.map(function(d) { return d[f]; }))\n            .range([0, width])\n            .padding(0.1);\n\n        // xScale.invert = function(x) {\n        //     var domain = this.domain();\n        //     var range = this.range()\n        //     var scale = d3.scaleQuantize().domain(range).range(domain)\n        //     return scale(x)\n        // }\n        return xScale;\n    }\n\n    createScaleLiner(f, range) {\n        const scaleLiner = d3.scaleLinear()\n        .domain(d3.extent(this.state.data, d=>d[f]))\n        .range(range)\n        .nice();\n        return scaleLiner;\n    }\n\n    componentDidUpdate(){\n\n        if(this.props.filters.length > 0){\n            this.circles.attr('class', d=> this.props.filterData.includes(d)?'brushed':'non_brushed')\n        }else{\n            this.circles.attr('class','brushed')\n        }\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            const rect = this.self.current.getBoundingClientRect();\n            const innerWidth = rect.width - this.state.margin.left - this.state.margin.right;\n            const innerHeight = rect.height - this.state.margin.top - this.state.margin.bottom;\n            // create svg \n            const svg = d3.select(this.self.current)\n            .append(\"svg\")\n                .attr(\"width\", rect.width)\n                .attr(\"height\", rect.height)\n            // create viewer\n            const viewer = svg.append(\"g\")\n                .attr(\"transform\", \"translate(\" + this.state.margin.left + \",\" + this.state.margin.top + \")\");\n            //\n            this.xScale = this.createScaleLiner(this.props.fields.x, [0, innerWidth]);\n            this.yScale = this.createScaleLiner(this.props.fields.y, [innerHeight, 0]);\n    \n            this.radiusScale = this.createScaleLiner(this.props.fields.z, [3, 10]);\n    \n            viewer.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + innerHeight + \")\")\n            .call(d3.axisBottom(this.xScale).tickSize(-innerHeight));\n            \n            // add the y Axis\n            viewer.append(\"g\")\n                .call(d3.axisLeft(this.yScale).tickSize(-innerWidth));\n    \n    \n    \n            this.circles = viewer.selectAll(\"circle\").data(this.state.data)\n            .enter().append(\"circle\")\n            .attr(\"r\", d => this.props.fields.z ? this.radiusScale(d[this.props.fields.z]) : 3)\n            .attr(\"cx\", d => this.xScale(d[this.props.fields.x]))\n            .attr(\"cy\", d => this.yScale(d[this.props.fields.y]))\n            .attr(\"class\", \"brushed\");\n    \n    \n    \n            this.brush = d3.brush().extent([[0,0],[innerWidth, innerHeight]])\n                //.on(\"brush\", this.brushed.bind(this))\n                .on(\"end\", this.end.bind(this)); \n    \n            this.brush_area = viewer.append(\"g\")\n            \n            .call(this.brush);\n            \n            this.componentDidUpdate()        \n        }, 500);\n        \n        \n    }\n    brushed(){\n        if (d3.event.selection != null) {\n            // revert circles to initial style\n            this.circles.attr(\"class\", \"non_brushed\");\n            // d3.event.selection\n            var brush_coords = d3.event.selection\n            // // style brushed circles\n            this.circles.filter(function(d,i,nodes){\n                      const node = nodes[i]\n                       var cx = d3.select(node).attr(\"cx\"),\n                           cy = d3.select(node).attr(\"cy\");\n                       return this.isBrushed(brush_coords, cx, cy);\n                   }.bind(this))\n                   .attr(\"class\", \"brushed\");\n        }\n    }\n    end(){\n        \n        if (!d3.event.selection) return;\n        var [x0, y0] = d3.event.selection[0],\n        [x1, y1] = d3.event.selection[1];\n        console.log('end', d3.event.selection)\n        const filters = [\n            {\n                id:this.props.id,\n                title:this.props.title,\n                field:this.props.fields.x,\n                operation:'range',\n                values:[numFixed(this.xScale.invert(x0)),numFixed(this.xScale.invert(x1))]\n            },\n            {\n                id:this.props.id,\n                title:this.props.title,\n                field:this.props.fields.y,\n                operation:'range',\n                values:[numFixed(this.yScale.invert(y1)),numFixed(this.yScale.invert(y0))]\n            }\n        ]\n        console.log(filters)\n        this.props.filterAdded(filters)\n        this.brush_area.call(this.brush.move, null);\n\n\n\n    }\n    createBrush(){\n    }\n\n    isBrushed(brush_coords, cx, cy) {\n        var [x0, y0] = brush_coords[0],\n            [x1, y1] = brush_coords[1];\n       return x0 <= cx && cx <= x1 && y0 <= cy && cy <= y1;\n   }\n\n    render() {\n        return (\n            <div\n              id={this.props.id}\n              ref={this.self}\n              style={{ width: \"100%\", height: \"100%\" }}\n            ></div>\n        );\n        return (\n        <div >\n          <svg width={this.props.width} height={this.props.height}>\n            {this.state.bars.map((d, i) => (\n              <rect\n                key={i}\n                x={d.x}\n                y={d.y}\n                width=\"2\"\n                height={d.height}\n                fill={d.fill}\n              />\n            ))}\n            <g>\n              <g\n                ref=\"xAxis\"\n                transform={`translate(0, ${height - margin.bottom})`}\n              />\n              <g ref=\"yAxis\" transform={`translate(${margin.left}, 0)`} />\n              <g ref=\"brush\" />\n            </g>\n          </svg>\n          </div>\n        );\n      }\n}\n"]}