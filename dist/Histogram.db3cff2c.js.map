{"version":3,"sources":["component/VisualTools/Chart/Histogram.js"],"names":["Histogram","data","fields","id","binsCount","filterData","filters","filterAdded","svgRef","x","d3","scaleLinear","y","Scales","hist","histogram","bins","margin","setTimeout","console","log","rect","current","getBoundingClientRect","innerWidth","width","innerHeight","height","svg","select","append","attr","domain","max","d","range","value","thresholds","ticks","length","brush","brushX","extent","on","event","selection","x0","x1","field","operation","values","invert","call","axisBottom","axisLeft","selectAll","join","Math","style","transition","duration"],"mappings":"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","file":"Histogram.db3cff2c.js","sourceRoot":"../source","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { numFixed } from \"../../../common/utils.js\";\nimport * as d3 from \"d3\";\n\n/**\n * @function Histogram\n * @description Creates an interactive histogram chart\n *              User can select specific range of x by brushing\n * @param {Object} data - total data without filtering\n * @param {Array} fields - contains filed to creat histogram on\n * @param {String} id - HTML id for the chart\n * @param {Integer} binsCount - number of bins to split data on\n * @param {Object} filterData - data after applying filters \n * @param {Array} filters - current filters\n * @param {Function} filterAdded - handler for adding new filter\n * @returns {Component}\n */\n\nconst Histogram = ({\n  data,\n  fields,\n  id,\n  binsCount,\n  filterData,\n  filters,\n  filterAdded,\n}) => {\n  const svgRef = useRef();\n  const [Scales, setScales] = useState({\n    x: d3.scaleLinear(),\n    y: d3.scaleLinear(),\n  });\n  const [histogram, setHistogram] = useState({\n    hist: d3.histogram(),\n    bins: null,\n  });\n  const margin = { top: 10, right: 10, bottom: 30, left: 40 };\n\n  // initialize svg and draw base histogram\n  useEffect(() => {\n    setTimeout(() => {\n      console.log(\"what\");\n      let rect = svgRef.current.getBoundingClientRect();\n      const innerWidth = rect.width - margin.left - margin.right;\n      const innerHeight = rect.height - margin.top - margin.bottom;\n\n      const svg = d3\n        .select(svgRef.current)\n        .append(\"svg\")\n        .attr(\"width\", rect.width)\n        .attr(\"height\", rect.height)\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      Scales.x\n        .domain([\n          0,\n          d3.max(data, (d) => {\n            return d[fields.x];\n          }),\n        ])\n        .range([0, innerWidth]);\n\n      histogram.hist\n        .value((d) => d[fields.x])\n        .domain(Scales.x.domain())\n        .thresholds(Scales.x.ticks(binsCount));\n\n      histogram.bins = histogram.hist(data);\n\n      Scales.y = d3\n        .scaleLinear()\n        .range([innerHeight, 0])\n        .domain([0, d3.max(histogram.bins, (d) => d.length)]);\n\n      // brush\n      const brush = d3\n        .brushX()\n        .extent([\n          [0, 0],\n          [innerWidth, innerHeight],\n        ])\n        .on(\"end\", () => {\n          if (d3.event.selection) {\n            const [x0, x1] = [d3.event.selection[0], d3.event.selection[1]];\n            filterAdded([\n              {\n                id: id,\n                field: fields.x,\n                operation: \"range\",\n                values: [\n                  numFixed(Scales.x.invert(x0)),\n                  numFixed(Scales.x.invert(x1)),\n                ],\n              },\n            ]);\n          }\n        });\n      svg.append(\"g\").call(brush);\n\n      // draw x-axis\n      svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + innerHeight + \")\")\n        .call(d3.axisBottom(Scales.x));\n\n      // draw y-axis\n      const view = svg\n        .append(\"g\")\n        .call(d3.axisLeft(Scales.y))\n        .append(\"g\")\n        .attr(\"class\", \"hist-area\");\n\n      // draw histogram rectangles\n      view\n        .selectAll(\".bar\")\n        .data(histogram.bins)\n        .join(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", 1)\n        .attr(\"transform\", function (d) {\n          return \"translate(\" + Scales.x(d.x0) + \",\" + Scales.y(d.length) + \")\";\n        })\n        .attr(\"width\", function (d) {\n          return Math.max(Scales.x(d.x1) - Scales.x(d.x0) - 1, 0);\n        })\n        .attr(\"height\", function (d) {\n          return innerHeight - Scales.y(d.length);\n        })\n        .style(\"fill\", \"#87CEFA\");\n    }, 100);\n  }, []);\n\n  // draw filtered histogram\n  useEffect(() => {\n    setTimeout(() => {\n      const rect = svgRef.current.getBoundingClientRect();\n      const innerHeight = rect.height - margin.top - margin.bottom;\n\n      let bins = histogram.bins;\n      if (filters.length != 0) {\n        bins = histogram.hist(filterData);\n      }\n\n      d3.select(svgRef.current)\n        .selectAll(\".hist-area\")\n        .selectAll(\".bar-f\")\n        .data(bins)\n        .join(\"rect\")\n        .attr(\"class\", \"bar-f\")\n        .style(\"transform\", \"scale(1, -1)\")\n        .attr(\"x\", (d) => Scales.x(d.x0))\n        .attr(\"y\", (d) => -innerHeight)\n        .transition()\n        .duration(1000)\n        .attr(\"width\", function (d) {\n          return Math.max(Scales.x(d.x1) - Scales.x(d.x0) - 1, 0);\n        })\n        .attr(\"height\", function (d) {\n          return innerHeight - Scales.y(d.length);\n        })\n        .style(\"fill\", \"#4682B4\");\n    }, 100);\n  }, [filterData]);\n  return (\n    <div id={id} ref={svgRef} style={{ width: \"100%\", height: \"100%\" }}></div>\n  );\n};\n\nexport default Histogram;\n"]}