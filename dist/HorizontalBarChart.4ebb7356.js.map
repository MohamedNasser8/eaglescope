{"version":3,"sources":["component/VisualTools/Chart/HorizontalBarChart.js"],"names":["PureComponent","HorizontalBarChart","props","self","React","createRef","state","margin","top","right","bottom","left","loading","error","fields","y","x","data","transform","field","new_data","d3","nest","key","d","sortKeys","ascending","rollup","v","length","entries","svg","f","height","yScale","scaleBand","domain","map","range","padding","width","xScale","scaleLinear","max","selection","className","update_bars","selectAll","enter_bars","enter","append","attr","bandwidth","bind","on","i","selected","value","filter","id","title","operation","values","filterAdded","text","merge","transition","duration","exit","remove","filters","filterData","filterbars","drawBar","viewer","createTextLabel","setTimeout","rect","current","getBoundingClientRect","innerWidth","innerHeight","select","createXScale","createYScale","call","axisBottom","tickSize","bars","componentDidUpdate"],"mappings":"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","file":"HorizontalBarChart.4ebb7356.js","sourceRoot":"../source","sourcesContent":["import React, { PureComponent } from 'react'\nimport {isEquivalent} from '../../../common/utils.js'\nimport * as d3 from \"d3\";\n\nexport default class HorizontalBarChart extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.self = React.createRef();\n        this.state = {\n            margin: {top: 10, right: 10, bottom: 35, left: 10},\n            loading:true,\n            error:null,\n            fields:{y:'key',x:'value'}\n        }\n        this.state.data = this.transform(this.props.data, this.props.fields.y);\n\n    }\n    transform(data,field){\n        const new_data =  d3.nest()\n            .key(function(d) { return d[field]; })\n            .sortKeys(d3.ascending)\n            .rollup(function(v) { return v.length; })\n            .entries(data);\n        return new_data;\n\n    }\n    createXAixs(svg) {\n\n    }\n\n    createYAixs(svg) {\n\n    }\n\n    createYScale(f,height) {\n        // set the ranges\n        const yScale = d3.scaleBand()\n            .domain(this.state.data.map(function(d) { return d[f]; }))\n            .range([height, 0])\n            .padding(0.1);\n        return yScale;\n    }\n\n    createXScale(f, width) {\n        const xScale = d3.scaleLinear()\n        .domain([0, d3.max(this.state.data, function(d) { return d[f]; })])\n        .range([0, width]);\n        return xScale;\n    }\n\n    drawBar(selection, data, className='og') {\n        const update_bars = selection.selectAll(`rect.${className}`).data(data,d=> d[this.state.fields.y])\n\n        const enter_bars = update_bars.enter().append('rect')\n        enter_bars.attr('class', `${className}`)\n            .attr(\"x\", 0)\n            .attr(\"height\", this.yScale.bandwidth())\n            .attr(\"y\",function(d) { return this.yScale(d[this.state.fields.y])}.bind(this))\n            enter_bars.on('click', (data,i) =>{\n                //enter_bars.attr('opacity',0.2)\n                const selected = enter_bars.filter(function(d){\n                  return d === data\n                })\n                //selected.attr('opacity',1)\n                const value = selected.data()[0].key\n                const filter = {\n                    id:this.props.id,\n                    title:this.props.title,\n                    field:this.props.fields.y,\n                    operation:'eq',\n                    values:value\n                }\n                this.props.filterAdded([filter])\n            })\n\n        enter_bars.append('title').text(d=> `${d.key}:${d.value}`)\n\n        update_bars.merge(enter_bars)\n            .transition().duration(1000)\n            .attr(\"width\", function(d) { return this.xScale(d[this.state.fields.x]); }.bind(this))\n            .selectAll('.label').text(d=>d.key)\n        // update_bars\n\n        update_bars.exit()\n            .transition().duration(1000)\n            .attr('width',0).remove()\n\n        return update_bars;\n\n    }\n\n    componentDidUpdate() {\n        // console.log('bar update',this.props)\n        let data = [];\n        if(this.props.filters.length > 0){\n            data = this.transform(this.props.filterData, this.props.fields.y)\n        }else{\n            data = this.transform(this.props.data, this.props.fields.y)\n        }\n        this.filterbars= this.drawBar(this.viewer,data,'ft');\n        this.createTextLabel();\n    }\n\n    componentDidMount() {\n        setTimeout(()=>{\n            const rect = this.self.current.getBoundingClientRect();\n            const innerWidth = rect.width - this.state.margin.left - this.state.margin.right;\n            this.innerHeight = rect.height - this.state.margin.top - this.state.margin.bottom;\n            // create svg\n            const svg = d3.select(this.self.current)\n            .append(\"svg\")\n                .attr(\"width\", rect.width)\n                .attr(\"height\", rect.height)\n            // create viewer\n            this.viewer = svg.append(\"g\")\n                .attr(\"transform\", \"translate(\" + this.state.margin.left + \",\" + this.state.margin.top + \")\");\n            //\n            this.xScale = this.createXScale(this.state.fields.x, innerWidth);\n            this.yScale = this.createYScale(this.state.fields.y, this.innerHeight);\n\n            this.viewer.append(\"g\")\n            .attr(\"transform\", `translate(0,${this.innerHeight})`)\n            .call(d3.axisBottom(this.xScale).tickSize(-this.innerHeight))\n\n            this.bars = this.drawBar(this.viewer, this.state.data,'og')\n            this.filterbars = this.drawBar(this.viewer, this.state.data,'ft')\n            this.createTextLabel();\n\n            this.componentDidUpdate()\n        }, 500);\n\n\n\n\n        // add the y Axis\n        // this.viewer.append(\"g\")\n        //     .call(d3.axisLeft(this.yScale));\n\n    }\n    createTextLabel(){\n        this.viewer.selectAll('.label').remove();\n        this.viewer.selectAll('.label').data(this.state.data,d=>d[this.state.fields.y]).enter()\n        .append('text')\n        .attr('class','label')\n        .attr('x', 5)\n        .attr('y', function(d) { return this.yScale(d[this.state.fields.y])+this.yScale.bandwidth()/2+4}.bind(this))\n        .text(d=>d.key)\n    }\n    render() {\n        return (\n            <div\n              id={this.props.id}\n              ref={this.self}\n              style={{ width: \"100%\", height: \"100%\" }}\n            ></div>\n        );\n        return (\n        <div >\n          <svg width={this.props.width} height={this.props.height}>\n            {this.state.bars.map((d, i) => (\n              <rect\n                key={i}\n                x={d.x}\n                y={d.y}\n                width=\"2\"\n                height={d.height}\n                fill={d.fill}\n              />\n            ))}\n            <g>\n              <g\n                ref=\"xAxis\"\n                transform={`translate(0, ${height - margin.bottom})`}\n              />\n              <g ref=\"yAxis\" transform={`translate(${margin.left}, 0)`} />\n              <g ref=\"brush\" />\n            </g>\n          </svg>\n          </div>\n        );\n      }\n}\n"]}