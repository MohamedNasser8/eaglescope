{"version":3,"sources":["component/VisualTools/Chart/ScatterChart.js"],"names":["PureComponent","ScatterChart","props","self","React","createRef","state","margin","top","right","bottom","left","loading","error","data","filter","d","fields","x","y","z","f","width","d3","scaleBand","domain","map","range","padding","scaleLinear","extent","nice","filters","length","circles","attr","filterData","includes","setTimeout","rect","current","getBoundingClientRect","innerWidth","innerHeight","height","viewer","select","append","xScale","createScaleLiner","yScale","radiusScale","call","axisBottom","tickSize","axisLeft","selectAll","enter","brush","on","end","bind","brush_area","componentDidUpdate","event","selection","brush_coords","i","nodes","node","cx","cy","isBrushed","x0","y0","x1","y1","console","log","id","title","field","operation","values","numFixed","invert","filterAdded","move"],"mappings":"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","file":"ScatterChart.98115992.js","sourceRoot":"../source","sourcesContent":["import React, { PureComponent } from 'react'\nimport {numFixed} from '../../../common/utils.js'; \nimport * as d3 from \"d3\";\nexport default class ScatterChart extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.self = React.createRef();\n        this.state = {\n            margin: {top: 10, right: 10, bottom: 25, left: 40},\n            loading:true,\n            error:null\n        }\n        this.state.data = this.props.data.filter(d=> d[this.props.fields.x]!='N/A'&&d[this.props.fields.y]!='N/A'&&d[this.props.fields.z]!='N/A' )\n    }\n\n    createXScale(f,width) {\n        // set the ranges\n        const xScale = d3.scaleBand()\n            .domain(this.state.data.map(function(d) { return d[f]; }))\n            .range([0, width])\n            .padding(0.1);\n\n        // xScale.invert = function(x) {\n        //     var domain = this.domain();\n        //     var range = this.range()\n        //     var scale = d3.scaleQuantize().domain(range).range(domain)\n        //     return scale(x)\n        // }\n        return xScale;\n    }\n\n    createScaleLiner(f, range) {\n        const scaleLiner = d3.scaleLinear()\n        .domain(d3.extent(this.state.data, d=>d[f]))\n        .range(range)\n        .nice();\n        return scaleLiner;\n    }\n\n    componentDidUpdate(){\n\n        if(this.props.filters.length > 0){\n            this.circles.attr('class', d=> this.props.filterData.includes(d)?'brushed':'non_brushed')\n        }else{\n            this.circles.attr('class','brushed')\n        }\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            const rect = this.self.current.getBoundingClientRect();\n            const innerWidth = rect.width - this.state.margin.left - this.state.margin.right;\n            const innerHeight = rect.height - this.state.margin.top - this.state.margin.bottom;\n            // create svg \n            const svg = d3.select(this.self.current)\n            .append(\"svg\")\n                .attr(\"width\", rect.width)\n                .attr(\"height\", rect.height)\n            // create viewer\n            const viewer = svg.append(\"g\")\n                .attr(\"transform\", \"translate(\" + this.state.margin.left + \",\" + this.state.margin.top + \")\");\n            //\n            this.xScale = this.createScaleLiner(this.props.fields.x, [0, innerWidth]);\n            this.yScale = this.createScaleLiner(this.props.fields.y, [innerHeight, 0]);\n    \n            this.radiusScale = this.createScaleLiner(this.props.fields.z, [3, 10]);\n    \n            viewer.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + innerHeight + \")\")\n            .call(d3.axisBottom(this.xScale).tickSize(-innerHeight));\n            \n            // add the y Axis\n            viewer.append(\"g\")\n                .call(d3.axisLeft(this.yScale).tickSize(-innerWidth));\n    \n    \n    \n            this.circles = viewer.selectAll(\"circle\").data(this.state.data)\n            .enter().append(\"circle\")\n            .attr(\"r\", d => this.props.fields.z ? this.radiusScale(d[this.props.fields.z]) : 3)\n            .attr(\"cx\", d => this.xScale(d[this.props.fields.x]))\n            .attr(\"cy\", d => this.yScale(d[this.props.fields.y]))\n            .attr(\"class\", \"brushed\");\n    \n    \n    \n            this.brush = d3.brush().extent([[0,0],[innerWidth, innerHeight]])\n                //.on(\"brush\", this.brushed.bind(this))\n                .on(\"end\", this.end.bind(this)); \n    \n            this.brush_area = viewer.append(\"g\")\n            \n            .call(this.brush);\n            \n            this.componentDidUpdate()        \n        }, 500);\n        \n        \n    }\n    brushed(){\n        if (d3.event.selection != null) {\n            // revert circles to initial style\n            this.circles.attr(\"class\", \"non_brushed\");\n            // d3.event.selection\n            var brush_coords = d3.event.selection\n            // // style brushed circles\n            this.circles.filter(function(d,i,nodes){\n                      const node = nodes[i]\n                       var cx = d3.select(node).attr(\"cx\"),\n                           cy = d3.select(node).attr(\"cy\");\n                       return this.isBrushed(brush_coords, cx, cy);\n                   }.bind(this))\n                   .attr(\"class\", \"brushed\");\n        }\n    }\n    end(){\n        \n        if (!d3.event.selection) return;\n        var [x0, y0] = d3.event.selection[0],\n        [x1, y1] = d3.event.selection[1];\n        console.log('end', d3.event.selection)\n        const filters = [\n            {\n                id:this.props.id,\n                title:this.props.title,\n                field:this.props.fields.x,\n                operation:'range',\n                values:[numFixed(this.xScale.invert(x0)),numFixed(this.xScale.invert(x1))]\n            },\n            {\n                id:this.props.id,\n                title:this.props.title,\n                field:this.props.fields.y,\n                operation:'range',\n                values:[numFixed(this.yScale.invert(y1)),numFixed(this.yScale.invert(y0))]\n            }\n        ]\n        console.log(filters)\n        this.props.filterAdded(filters)\n        this.brush_area.call(this.brush.move, null);\n\n\n\n    }\n    createBrush(){\n    }\n\n    isBrushed(brush_coords, cx, cy) {\n        var [x0, y0] = brush_coords[0],\n            [x1, y1] = brush_coords[1];\n       return x0 <= cx && cx <= x1 && y0 <= cy && cy <= y1;\n   }\n\n    render() {\n        return (\n            <div\n              id={this.props.id}\n              ref={this.self}\n              style={{ width: \"100%\", height: \"100%\" }}\n            ></div>\n        );\n        return (\n        <div >\n          <svg width={this.props.width} height={this.props.height}>\n            {this.state.bars.map((d, i) => (\n              <rect\n                key={i}\n                x={d.x}\n                y={d.y}\n                width=\"2\"\n                height={d.height}\n                fill={d.fill}\n              />\n            ))}\n            <g>\n              <g\n                ref=\"xAxis\"\n                transform={`translate(0, ${height - margin.bottom})`}\n              />\n              <g ref=\"yAxis\" transform={`translate(${margin.left}, 0)`} />\n              <g ref=\"brush\" />\n            </g>\n          </svg>\n          </div>\n        );\n      }\n}\n"]}