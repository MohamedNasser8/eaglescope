{"version":3,"sources":["component/VisualTools/Chart/KMCurve.js"],"names":["PureComponent","isUndefined","d","undefined","toLowerCase","KMCurve","props","self","React","createRef","maxTime","Number","NEGATIVE_INFINITY","state","margin","top","right","bottom","left","loading","error","filter","data","transform","field","value","fields","event_value","eventValue","censored_value","censoredValue","group","time","event","collapsed_stage","Math","max","map","groups","d3","nest","key","entries","rs","forEach","g","risk","values","length","sortKeys","a","b","rollup","v","censor","p","points","e","c","push","censored","viewer","color","line","curve","curveStepAfter","x","xScale","y","yScale","append","datum","attr","style","point","drawLine","setTimeout","rect","current","getBoundingClientRect","innerWidth","width","innerHeight","height","svg","select","scaleLinear","domain","range","scaleOrdinal","quantize","t","interpolateSpectral","call","axisBottom","ticks","text","unit","axisLeft","drawKMCurve","lg","selectAll","enter","i","offset","getBBox","nodeWidth","id"],"mappings":"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","file":"KMCurve.65ce4908.js","sourceRoot":"../source","sourcesContent":["import React, { PureComponent } from 'react'\nimport {isEquivalent} from '../../../common/utils.js'\nimport * as d3 from \"d3\";\n\nfunction isUndefined(d){\n    return d==undefined||d==null||(typeof d === 'string' && d.toLowerCase()==`na`)\n}\nexport default class KMCurve extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.self = React.createRef();\n        this.maxTime = Number.NEGATIVE_INFINITY;\n        this.state = {\n            margin: {top: 35, right: 20, bottom: 45, left: 45},\n            loading:true,\n            error:null\n        }\n        if(this.props.filter) {\n            this.state.data = this.transform(this.props.data.filter(d=>d[this.props.filter.field]==this.props.filter.value), this.props.fields);\n        }else{\n            this.state.data = this.transform(this.props.data, this.props.fields);\n        }\n    }\n    transform(data,field){\n        const event_value = field.eventValue;\n        const censored_value = field.censoredValue;\n        const group =  field.group.field;\n        const time = field.time.field;\n        const event = field.event.field;\n        \n        \n        data = data.filter(d=>d.collapsed_stage!='stage_x/NR'&&!isUndefined(d[time])&&!isUndefined(d[event])&&!isUndefined(d[group]))\n        this.maxTime = Math.max(...data.map(d=>d[time]));\n        const groups = d3.nest().key(d=>d[group]).entries(data)\n        const rs = []\n        groups.forEach(g=>{\n            const key = g.key;\n            let risk = g.values.length;\n            const values = d3.nest()\n            .key(d=> +d[time])\n            .sortKeys((a,b)=>(+a)-(+b))\n            .rollup(function(v) {\n                return {\n                    event:v.filter(d=>d[event]==event_value).length,\n                    censor:v.filter(d=>d[event]==censored_value).length\n                };\n            })\n            .entries(g.values);\n            let p = 1;\n            const points = [];\n            values.forEach(d=>{\n                const time = +d.key;\n                const e = d.value.event;\n                const c = d.value.censor;\n                if(time<0) return;\n                if(e > 0){\n                    p *= (1 - e/risk)\n                    const censored = false;\n                    points.push({p, time, censored})\n                }\n                if(c > 0){\n                    const censored = true;\n                    points.push({p, time, censored})\n                }\n                risk -= (e + c);\n            })\n            rs.push({key,points})\n            \n        })\n        \n        return rs;\n        \n    }\n    \n    drawLine(viewer, points, color){\n        const line = d3.line()\n        .curve(d3.curveStepAfter)\n        .x(d=> this.xScale(d.time))\n        .y(d=> this.yScale(d.p));       \n        viewer.append(\"path\")\n            .datum(points)\n            .attr(\"class\", \"line\")\n            .style(\"stroke\", color)\n            .attr(\"d\", line);\n        \n        \n        points.forEach(point=>{\n            if(point.censored){\n                const p = [{\n                    p:point.p-0.015,\n                    time:point.time,\n                },{\n                    p:point.p+0.015,\n                    time:point.time,\n                }] \n                viewer.append(\"path\")\n                .datum(p)\n                .attr(\"class\", \"mark\")\n                .style(\"stroke\", color)\n                .attr(\"d\", line);\n            }\n        })\n        \n        \n    }\n\n    drawCensoredMark(viewer , point, color){\n\n    }\n\n    drawKMCurve(viewer, d) {\n        \n        // draw lines\n        this.drawLine(viewer, d.points, this.color(d.key))\n        // draw marks\n    }\n\n    componentDidUpdate() {\n\n    }\n    \n    componentDidMount() {\n        setTimeout(()=>{\n            const rect = this.self.current.getBoundingClientRect();\n            const innerWidth = rect.width - this.state.margin.left - this.state.margin.right;\n            const innerHeight = rect.height - this.state.margin.top - this.state.margin.bottom;\n            // create svg \n            const svg = d3.select(this.self.current)\n            .append(\"svg\")\n                .attr(\"width\", rect.width)\n                .attr(\"height\", rect.height)\n            // create viewer\n            const viewer = svg.append(\"g\")\n                .attr(\"transform\", \"translate(\" + this.state.margin.left + \",\" + this.state.margin.top + \")\");\n            //\n            this.xScale = d3.scaleLinear()\n            .domain([0, this.maxTime])\n            .range([0, innerWidth])\n            \n            this.yScale = d3.scaleLinear()\n            .domain([0, 1])\n            .range([innerHeight, 0])\n    \n            this.color = d3.scaleOrdinal()\n            .domain(this.state.data.map(d => d.key))\n            .range(d3.quantize(t => d3.interpolateSpectral(t), this.state.data.length))\n            \n            \n    \n    \n            const xaxisGroup = viewer.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + innerHeight + \")\")\n            .call(d3.axisBottom(this.xScale).ticks(4)); //.tickSize(-innerWidth));\n            xaxisGroup.append('text')\n            .attr('y', 30)\n            .attr('x', innerWidth/2)\n            .attr('fill','black')\n            .attr('font-size',13)\n            .text(`Time ${this.props.fields.time.unit?`(${this.props.fields.time.unit})`:''}`)\n            \n            // add the y Axis\n            const yaxisGroup = viewer.append(\"g\")\n                .call(d3.axisLeft(this.yScale).ticks(4)); // .tickSize(-innerWidth)\n                yaxisGroup.append('text')\n                .attr('y', -30)\n                .attr('x', -innerHeight/3)\n                .attr('fill','black')\n                .attr('font-size',13)\n                .attr(\"transform\", \"rotate(-90)\")\n                .text(`Survival Probability`)\n    \n            this.state.data.forEach(d=>this.drawKMCurve(viewer,d))\n    \n    \n            const height = 0;\n            const width = 15;\n            var nodeWidth = (d) => d.getBBox().width;\n            const legend = svg.append('g')\n              .attr('class', 'legend')\n              .attr('transform', `translate(${this.state.margin.left+innerWidth/2},0)`);\n    \n            const lg = legend.selectAll('g')\n              .data(this.state.data)\n              .enter()\n            .append('g')\n              .attr('transform', (d,i) => `translate(${i * 100},${height + 15})`);\n    \n            lg.append('rect')\n              .style('fill', d => this.color(d.key))\n              .attr('x', 0)\n              .attr('y', 0)\n              .attr('width', 10)\n              .attr('height', 10);\n    \n            lg.append('text')\n              .style('font-family', 'Georgia')\n              .style('font-size', '13px')\n              .attr('x', 17.5)\n              .attr('y', 10)\n              .text(d => d.key);\n    \n            let offset = 0;\n            lg.attr('transform', function(d, i) {\n                let x = offset;\n                offset += nodeWidth(this) + 10;\n                return `translate(${x},${height + 10})`;\n            }); \n        },500);\n       \n    }\n    \n    render() {\n        return (\n            <div\n              id={this.props.id}\n              ref={this.self}\n              style={{ width: \"100%\", height: \"100%\" }}\n            ></div>\n        );\n    }\n}\n"]}