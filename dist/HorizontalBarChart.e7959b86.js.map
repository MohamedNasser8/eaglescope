{"version":3,"sources":["component/VisualTools/Chart/HorizontalBarChart.js"],"names":["PureComponent","HorizontalBarChart","props","self","React","createRef","state","margin","top","right","bottom","left","loading","error","fields","y","x","data","transform","field","d3","nest","key","d","sortKeys","ascending","rollup","v","length","entries","svg","f","height","scaleBand","domain","map","range","padding","width","scaleLinear","max","selection","className","update_bars","selectAll","enter_bars","enter","append","attr","yScale","bandwidth","bind","on","i","value","filter","id","title","operation","values","filterAdded","text","merge","transition","duration","xScale","exit","remove","filters","filterData","filterbars","drawBar","viewer","createTextLabel","setTimeout","rect","current","getBoundingClientRect","innerWidth","innerHeight","select","createXScale","createYScale","call","axisBottom","tickSize","bars","componentDidUpdate"],"mappings":"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","file":"HorizontalBarChart.e7959b86.js","sourceRoot":"../source","sourcesContent":["import React, { PureComponent } from 'react'\nimport {isEquivalent} from '../../../common/utils.js'\nimport * as d3 from \"d3\";\n\nexport default class HorizontalBarChart extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.self = React.createRef();\n        this.state = {\n            margin: {top: 10, right: 10, bottom: 35, left: 10},\n            loading:true,\n            error:null,\n            fields:{y:'key',x:'value'}\n        }\n        this.state.data = this.transform(this.props.data, this.props.fields.y);\n\n    }\n    transform(data,field){\n        const new_data =  d3.nest()\n            .key(function(d) { return d[field]; })\n            .sortKeys(d3.ascending)\n            .rollup(function(v) { return v.length; })\n            .entries(data);\n        return new_data;\n\n    }\n    createXAixs(svg) {\n\n    }\n\n    createYAixs(svg) {\n\n    }\n\n    createYScale(f,height) {\n        // set the ranges\n        const yScale = d3.scaleBand()\n            .domain(this.state.data.map(function(d) { return d[f]; }))\n            .range([height, 0])\n            .padding(0.1);\n        return yScale;\n    }\n\n    createXScale(f, width) {\n        const xScale = d3.scaleLinear()\n        .domain([0, d3.max(this.state.data, function(d) { return d[f]; })])\n        .range([0, width]);\n        return xScale;\n    }\n\n    drawBar(selection, data, className='og') {\n        const update_bars = selection.selectAll(`rect.${className}`).data(data,d=> d[this.state.fields.y])\n\n        const enter_bars = update_bars.enter().append('rect')\n        enter_bars.attr('class', `${className}`)\n            .attr(\"x\", 0)\n            .attr(\"height\", this.yScale.bandwidth())\n            .attr(\"y\",function(d) { return this.yScale(d[this.state.fields.y])}.bind(this))\n            enter_bars.on('click', (data,i) =>{\n                //enter_bars.attr('opacity',0.2)\n                const selected = enter_bars.filter(function(d){\n                  return d === data\n                })\n                //selected.attr('opacity',1)\n                const value = selected.data()[0].key\n                const filter = {\n                    id:this.props.id,\n                    title:this.props.title,\n                    field:this.props.fields.y,\n                    operation:'eq',\n                    values:value\n                }\n                this.props.filterAdded([filter])\n            })\n\n        enter_bars.append('title').text(d=> `${d.key}:${d.value}`)\n\n        update_bars.merge(enter_bars)\n            .transition().duration(1000)\n            .attr(\"width\", function(d) { return this.xScale(d[this.state.fields.x]); }.bind(this))\n            .selectAll('.label').text(d=>d.key)\n        // update_bars\n\n        update_bars.exit()\n            .transition().duration(1000)\n            .attr('width',0).remove()\n\n        return update_bars;\n\n    }\n\n    componentDidUpdate() {\n        // console.log('bar update',this.props)\n        let data = [];\n        if(this.props.filters.length > 0){\n            data = this.transform(this.props.filterData, this.props.fields.y)\n        }else{\n            data = this.transform(this.props.data, this.props.fields.y)\n        }\n        this.filterbars= this.drawBar(this.viewer,data,'ft');\n        this.createTextLabel();\n    }\n\n    componentDidMount() {\n        setTimeout(()=>{\n            const rect = this.self.current.getBoundingClientRect();\n            const innerWidth = rect.width - this.state.margin.left - this.state.margin.right;\n            this.innerHeight = rect.height - this.state.margin.top - this.state.margin.bottom;\n            // create svg\n            const svg = d3.select(this.self.current)\n            .append(\"svg\")\n                .attr(\"width\", rect.width)\n                .attr(\"height\", rect.height)\n            // create viewer\n            this.viewer = svg.append(\"g\")\n                .attr(\"transform\", \"translate(\" + this.state.margin.left + \",\" + this.state.margin.top + \")\");\n            //\n            this.xScale = this.createXScale(this.state.fields.x, innerWidth);\n            this.yScale = this.createYScale(this.state.fields.y, this.innerHeight);\n\n            this.viewer.append(\"g\")\n            .attr(\"transform\", `translate(0,${this.innerHeight})`)\n            .call(d3.axisBottom(this.xScale).tickSize(-this.innerHeight))\n\n            this.bars = this.drawBar(this.viewer, this.state.data,'og')\n            this.filterbars = this.drawBar(this.viewer, this.state.data,'ft')\n            this.createTextLabel();\n\n            this.componentDidUpdate()\n        }, 500);\n\n\n\n\n        // add the y Axis\n        // this.viewer.append(\"g\")\n        //     .call(d3.axisLeft(this.yScale));\n\n    }\n    createTextLabel(){\n        this.viewer.selectAll('.label').remove();\n        this.viewer.selectAll('.label').data(this.state.data,d=>d[this.state.fields.y]).enter()\n        .append('text')\n        .attr('class','label')\n        .attr('x', 5)\n        .attr('y', function(d) { return this.yScale(d[this.state.fields.y])+this.yScale.bandwidth()/2+4}.bind(this))\n        .text(d=>d.key)\n    }\n    render() {\n        return (\n            <div\n              id={this.props.id}\n              ref={this.self}\n              style={{ width: \"100%\", height: \"100%\" }}\n            ></div>\n        );\n        return (\n        <div >\n          <svg width={this.props.width} height={this.props.height}>\n            {this.state.bars.map((d, i) => (\n              <rect\n                key={i}\n                x={d.x}\n                y={d.y}\n                width=\"2\"\n                height={d.height}\n                fill={d.fill}\n              />\n            ))}\n            <g>\n              <g\n                ref=\"xAxis\"\n                transform={`translate(0, ${height - margin.bottom})`}\n              />\n              <g ref=\"yAxis\" transform={`translate(${margin.left}, 0)`} />\n              <g ref=\"brush\" />\n            </g>\n          </svg>\n          </div>\n        );\n      }\n}\n"]}