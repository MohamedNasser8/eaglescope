{"version":3,"sources":["component/VisualTools/Chart/Histogram.js"],"names":["Histogram","data","fields","id","binsCount","filterData","filters","filterAdded","svgRef","useRef","useState","x","d3","scaleLinear","y","Scales","setScales","hist","histogram","bins","setHistogram","margin","top","right","bottom","left","useEffect","setTimeout","console","log","rect","current","getBoundingClientRect","innerWidth","width","innerHeight","height","svg","select","append","attr","domain","max","d","range","value","thresholds","ticks","length","brush","brushX","extent","on","event","selection","x0","x1","field","operation","values","numFixed","invert","call","axisBottom","view","axisLeft","selectAll","join","Math","style","transition","duration"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,SAAS,GAAG,SAAZA,SAAY,OAQZ;EAAA,IAPJC,IAOI,QAPJA,IAOI;EAAA,IANJC,MAMI,QANJA,MAMI;EAAA,IALJC,EAKI,QALJA,EAKI;EAAA,IAJJC,SAII,QAJJA,SAII;EAAA,IAHJC,UAGI,QAHJA,UAGI;EAAA,IAFJC,OAEI,QAFJA,OAEI;EAAA,IADJC,WACI,QADJA,WACI;EACJ,IAAMC,MAAM,GAAG,IAAAC,aAAA,GAAf;;EACA,gBAA4B,IAAAC,eAAA,EAAS;IACnCC,CAAC,EAAEC,EAAE,CAACC,WAAH,EADgC;IAEnCC,CAAC,EAAEF,EAAE,CAACC,WAAH;EAFgC,CAAT,CAA5B;EAAA;EAAA,IAAOE,MAAP;EAAA,IAAeC,SAAf;;EAIA,iBAAkC,IAAAN,eAAA,EAAS;IACzCO,IAAI,EAAEL,EAAE,CAACM,SAAH,EADmC;IAEzCC,IAAI,EAAE;EAFmC,CAAT,CAAlC;EAAA;EAAA,IAAOD,SAAP;EAAA,IAAkBE,YAAlB;;EAIA,IAAMC,MAAM,GAAG;IAAEC,GAAG,EAAE,EAAP;IAAWC,KAAK,EAAE,EAAlB;IAAsBC,MAAM,EAAE,EAA9B;IAAkCC,IAAI,EAAE;EAAxC,CAAf,CAVI,CAYJ;;EACA,IAAAC,gBAAA,EAAU,YAAM;IACdC,UAAU,CAAC,YAAM;MACfC,OAAO,CAACC,GAAR,CAAY,MAAZ;MACA,IAAIC,IAAI,GAAGtB,MAAM,CAACuB,OAAP,CAAeC,qBAAf,EAAX;MACA,IAAMC,UAAU,GAAGH,IAAI,CAACI,KAAL,GAAab,MAAM,CAACI,IAApB,GAA2BJ,MAAM,CAACE,KAArD;MACA,IAAMY,WAAW,GAAGL,IAAI,CAACM,MAAL,GAAcf,MAAM,CAACC,GAArB,GAA2BD,MAAM,CAACG,MAAtD;MAEA,IAAMa,GAAG,GAAGzB,EAAE,CACX0B,MADS,CACF9B,MAAM,CAACuB,OADL,EAETQ,MAFS,CAEF,KAFE,EAGTC,IAHS,CAGJ,OAHI,EAGKV,IAAI,CAACI,KAHV,EAITM,IAJS,CAIJ,QAJI,EAIMV,IAAI,CAACM,MAJX,EAKTG,MALS,CAKF,GALE,EAMTC,IANS,CAMJ,WANI,EAMS,eAAenB,MAAM,CAACI,IAAtB,GAA6B,GAA7B,GAAmCJ,MAAM,CAACC,GAA1C,GAAgD,GANzD,CAAZ;MAQAP,MAAM,CAACJ,CAAP,CACG8B,MADH,CACU,CACN,CADM,EAEN7B,EAAE,CAAC8B,GAAH,CAAOzC,IAAP,EAAa,UAAC0C,CAAD,EAAO;QAClB,OAAOA,CAAC,CAACzC,MAAM,CAACS,CAAR,CAAR;MACD,CAFD,CAFM,CADV,EAOGiC,KAPH,CAOS,CAAC,CAAD,EAAIX,UAAJ,CAPT;MASAf,SAAS,CAACD,IAAV,CACG4B,KADH,CACS,UAACF,CAAD;QAAA,OAAOA,CAAC,CAACzC,MAAM,CAACS,CAAR,CAAR;MAAA,CADT,EAEG8B,MAFH,CAEU1B,MAAM,CAACJ,CAAP,CAAS8B,MAAT,EAFV,EAGGK,UAHH,CAGc/B,MAAM,CAACJ,CAAP,CAASoC,KAAT,CAAe3C,SAAf,CAHd;MAKAc,SAAS,CAACC,IAAV,GAAiBD,SAAS,CAACD,IAAV,CAAehB,IAAf,CAAjB;MAEAc,MAAM,CAACD,CAAP,GAAWF,EAAE,CACVC,WADQ,GAER+B,KAFQ,CAEF,CAACT,WAAD,EAAc,CAAd,CAFE,EAGRM,MAHQ,CAGD,CAAC,CAAD,EAAI7B,EAAE,CAAC8B,GAAH,CAAOxB,SAAS,CAACC,IAAjB,EAAuB,UAACwB,CAAD;QAAA,OAAOA,CAAC,CAACK,MAAT;MAAA,CAAvB,CAAJ,CAHC,CAAX,CA9Be,CAmCf;;MACA,IAAMC,KAAK,GAAGrC,EAAE,CACbsC,MADW,GAEXC,MAFW,CAEJ,CACN,CAAC,CAAD,EAAI,CAAJ,CADM,EAEN,CAAClB,UAAD,EAAaE,WAAb,CAFM,CAFI,EAMXiB,EANW,CAMR,KANQ,EAMD,YAAM;QACf,IAAIxC,EAAE,CAACyC,KAAH,CAASC,SAAb,EAAwB;UACtB,YAAiB,CAAC1C,EAAE,CAACyC,KAAH,CAASC,SAAT,CAAmB,CAAnB,CAAD,EAAwB1C,EAAE,CAACyC,KAAH,CAASC,SAAT,CAAmB,CAAnB,CAAxB,CAAjB;UAAA,IAAOC,EAAP;UAAA,IAAWC,EAAX;UACAjD,WAAW,CAAC,CACV;YACEJ,EAAE,EAAEA,EADN;YAEEsD,KAAK,EAAEvD,MAAM,CAACS,CAFhB;YAGE+C,SAAS,EAAE,OAHb;YAIEC,MAAM,EAAE,CACN,IAAAC,eAAA,EAAS7C,MAAM,CAACJ,CAAP,CAASkD,MAAT,CAAgBN,EAAhB,CAAT,CADM,EAEN,IAAAK,eAAA,EAAS7C,MAAM,CAACJ,CAAP,CAASkD,MAAT,CAAgBL,EAAhB,CAAT,CAFM;UAJV,CADU,CAAD,CAAX;QAWD;MACF,CArBW,CAAd;MAsBAnB,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBuB,IAAhB,CAAqBb,KAArB,EA1De,CA4Df;;MACAZ,GAAG,CACAE,MADH,CACU,GADV,EAEGC,IAFH,CAEQ,WAFR,EAEqB,iBAAiBL,WAAjB,GAA+B,GAFpD,EAGG2B,IAHH,CAGQlD,EAAE,CAACmD,UAAH,CAAchD,MAAM,CAACJ,CAArB,CAHR,EA7De,CAkEf;;MACA,IAAMqD,IAAI,GAAG3B,GAAG,CACbE,MADU,CACH,GADG,EAEVuB,IAFU,CAELlD,EAAE,CAACqD,QAAH,CAAYlD,MAAM,CAACD,CAAnB,CAFK,EAGVyB,MAHU,CAGH,GAHG,EAIVC,IAJU,CAIL,OAJK,EAII,WAJJ,CAAb,CAnEe,CAyEf;;MACAwB,IAAI,CACDE,SADH,CACa,MADb,EAEGjE,IAFH,CAEQiB,SAAS,CAACC,IAFlB,EAGGgD,IAHH,CAGQ,MAHR,EAIG3B,IAJH,CAIQ,OAJR,EAIiB,KAJjB,EAKGA,IALH,CAKQ,GALR,EAKa,CALb,EAMGA,IANH,CAMQ,WANR,EAMqB,UAAUG,CAAV,EAAa;QAC9B,OAAO,eAAe5B,MAAM,CAACJ,CAAP,CAASgC,CAAC,CAACY,EAAX,CAAf,GAAgC,GAAhC,GAAsCxC,MAAM,CAACD,CAAP,CAAS6B,CAAC,CAACK,MAAX,CAAtC,GAA2D,GAAlE;MACD,CARH,EASGR,IATH,CASQ,OATR,EASiB,UAAUG,CAAV,EAAa;QAC1B,OAAOyB,IAAI,CAAC1B,GAAL,CAAS3B,MAAM,CAACJ,CAAP,CAASgC,CAAC,CAACa,EAAX,IAAiBzC,MAAM,CAACJ,CAAP,CAASgC,CAAC,CAACY,EAAX,CAAjB,GAAkC,CAA3C,EAA8C,CAA9C,CAAP;MACD,CAXH,EAYGf,IAZH,CAYQ,QAZR,EAYkB,UAAUG,CAAV,EAAa;QAC3B,OAAOR,WAAW,GAAGpB,MAAM,CAACD,CAAP,CAAS6B,CAAC,CAACK,MAAX,CAArB;MACD,CAdH,EAeGqB,KAfH,CAeS,MAfT,EAeiB,SAfjB;IAgBD,CA1FS,EA0FP,GA1FO,CAAV;EA2FD,CA5FD,EA4FG,EA5FH,EAbI,CA2GJ;;EACA,IAAA3C,gBAAA,EAAU,YAAM;IACdC,UAAU,CAAC,YAAM;MACf,IAAMG,IAAI,GAAGtB,MAAM,CAACuB,OAAP,CAAeC,qBAAf,EAAb;MACA,IAAMG,WAAW,GAAGL,IAAI,CAACM,MAAL,GAAcf,MAAM,CAACC,GAArB,GAA2BD,MAAM,CAACG,MAAtD;MAEA,IAAIL,IAAI,GAAGD,SAAS,CAACC,IAArB;;MACA,IAAIb,OAAO,CAAC0C,MAAR,IAAkB,CAAtB,EAAyB;QACvB7B,IAAI,GAAGD,SAAS,CAACD,IAAV,CAAeZ,UAAf,CAAP;MACD;;MAEDO,EAAE,CAAC0B,MAAH,CAAU9B,MAAM,CAACuB,OAAjB,EACGmC,SADH,CACa,YADb,EAEGA,SAFH,CAEa,QAFb,EAGGjE,IAHH,CAGQkB,IAHR,EAIGgD,IAJH,CAIQ,MAJR,EAKG3B,IALH,CAKQ,OALR,EAKiB,OALjB,EAMG6B,KANH,CAMS,WANT,EAMsB,cANtB,EAOG7B,IAPH,CAOQ,GAPR,EAOa,UAACG,CAAD;QAAA,OAAO5B,MAAM,CAACJ,CAAP,CAASgC,CAAC,CAACY,EAAX,CAAP;MAAA,CAPb,EAQGf,IARH,CAQQ,GARR,EAQa,UAACG,CAAD;QAAA,OAAO,CAACR,WAAR;MAAA,CARb,EASGmC,UATH,GAUGC,QAVH,CAUY,IAVZ,EAWG/B,IAXH,CAWQ,OAXR,EAWiB,UAAUG,CAAV,EAAa;QAC1B,OAAOyB,IAAI,CAAC1B,GAAL,CAAS3B,MAAM,CAACJ,CAAP,CAASgC,CAAC,CAACa,EAAX,IAAiBzC,MAAM,CAACJ,CAAP,CAASgC,CAAC,CAACY,EAAX,CAAjB,GAAkC,CAA3C,EAA8C,CAA9C,CAAP;MACD,CAbH,EAcGf,IAdH,CAcQ,QAdR,EAckB,UAAUG,CAAV,EAAa;QAC3B,OAAOR,WAAW,GAAGpB,MAAM,CAACD,CAAP,CAAS6B,CAAC,CAACK,MAAX,CAArB;MACD,CAhBH,EAiBGqB,KAjBH,CAiBS,MAjBT,EAiBiB,SAjBjB;IAkBD,CA3BS,EA2BP,GA3BO,CAAV;EA4BD,CA7BD,EA6BG,CAAChE,UAAD,CA7BH;EA8BA,oBACE;IAAK,EAAE,EAAEF,EAAT;IAAa,GAAG,EAAEK,MAAlB;IAA0B,KAAK,EAAE;MAAE0B,KAAK,EAAE,MAAT;MAAiBE,MAAM,EAAE;IAAzB;EAAjC,EADF;AAGD,CArJD;;eAuJepC","file":"Histogram.cf26dbbf.js","sourceRoot":"../source","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { numFixed } from \"../../../common/utils.js\";\nimport * as d3 from \"d3\";\n\n/**\n * @function Histogram\n * @description Creates an interactive histogram chart\n *              User can select specific range of x by brushing\n * @param {Object} data - total data without filtering\n * @param {Array} fields - contains filed to creat histogram on\n * @param {String} id - HTML id for the chart\n * @param {Integer} binsCount - number of bins to split data on\n * @param {Object} filterData - data after applying filters \n * @param {Array} filters - current filters\n * @param {Function} filterAdded - handler for adding new filter\n * @returns {Component}\n */\n\nconst Histogram = ({\n  data,\n  fields,\n  id,\n  binsCount,\n  filterData,\n  filters,\n  filterAdded,\n}) => {\n  const svgRef = useRef();\n  const [Scales, setScales] = useState({\n    x: d3.scaleLinear(),\n    y: d3.scaleLinear(),\n  });\n  const [histogram, setHistogram] = useState({\n    hist: d3.histogram(),\n    bins: null,\n  });\n  const margin = { top: 10, right: 10, bottom: 30, left: 40 };\n\n  // initialize svg and draw base histogram\n  useEffect(() => {\n    setTimeout(() => {\n      console.log(\"what\");\n      let rect = svgRef.current.getBoundingClientRect();\n      const innerWidth = rect.width - margin.left - margin.right;\n      const innerHeight = rect.height - margin.top - margin.bottom;\n\n      const svg = d3\n        .select(svgRef.current)\n        .append(\"svg\")\n        .attr(\"width\", rect.width)\n        .attr(\"height\", rect.height)\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      Scales.x\n        .domain([\n          0,\n          d3.max(data, (d) => {\n            return d[fields.x];\n          }),\n        ])\n        .range([0, innerWidth]);\n\n      histogram.hist\n        .value((d) => d[fields.x])\n        .domain(Scales.x.domain())\n        .thresholds(Scales.x.ticks(binsCount));\n\n      histogram.bins = histogram.hist(data);\n\n      Scales.y = d3\n        .scaleLinear()\n        .range([innerHeight, 0])\n        .domain([0, d3.max(histogram.bins, (d) => d.length)]);\n\n      // brush\n      const brush = d3\n        .brushX()\n        .extent([\n          [0, 0],\n          [innerWidth, innerHeight],\n        ])\n        .on(\"end\", () => {\n          if (d3.event.selection) {\n            const [x0, x1] = [d3.event.selection[0], d3.event.selection[1]];\n            filterAdded([\n              {\n                id: id,\n                field: fields.x,\n                operation: \"range\",\n                values: [\n                  numFixed(Scales.x.invert(x0)),\n                  numFixed(Scales.x.invert(x1)),\n                ],\n              },\n            ]);\n          }\n        });\n      svg.append(\"g\").call(brush);\n\n      // draw x-axis\n      svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + innerHeight + \")\")\n        .call(d3.axisBottom(Scales.x));\n\n      // draw y-axis\n      const view = svg\n        .append(\"g\")\n        .call(d3.axisLeft(Scales.y))\n        .append(\"g\")\n        .attr(\"class\", \"hist-area\");\n\n      // draw histogram rectangles\n      view\n        .selectAll(\".bar\")\n        .data(histogram.bins)\n        .join(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", 1)\n        .attr(\"transform\", function (d) {\n          return \"translate(\" + Scales.x(d.x0) + \",\" + Scales.y(d.length) + \")\";\n        })\n        .attr(\"width\", function (d) {\n          return Math.max(Scales.x(d.x1) - Scales.x(d.x0) - 1, 0);\n        })\n        .attr(\"height\", function (d) {\n          return innerHeight - Scales.y(d.length);\n        })\n        .style(\"fill\", \"#87CEFA\");\n    }, 100);\n  }, []);\n\n  // draw filtered histogram\n  useEffect(() => {\n    setTimeout(() => {\n      const rect = svgRef.current.getBoundingClientRect();\n      const innerHeight = rect.height - margin.top - margin.bottom;\n\n      let bins = histogram.bins;\n      if (filters.length != 0) {\n        bins = histogram.hist(filterData);\n      }\n\n      d3.select(svgRef.current)\n        .selectAll(\".hist-area\")\n        .selectAll(\".bar-f\")\n        .data(bins)\n        .join(\"rect\")\n        .attr(\"class\", \"bar-f\")\n        .style(\"transform\", \"scale(1, -1)\")\n        .attr(\"x\", (d) => Scales.x(d.x0))\n        .attr(\"y\", (d) => -innerHeight)\n        .transition()\n        .duration(1000)\n        .attr(\"width\", function (d) {\n          return Math.max(Scales.x(d.x1) - Scales.x(d.x0) - 1, 0);\n        })\n        .attr(\"height\", function (d) {\n          return innerHeight - Scales.y(d.length);\n        })\n        .style(\"fill\", \"#4682B4\");\n    }, 100);\n  }, [filterData]);\n  return (\n    <div id={id} ref={svgRef} style={{ width: \"100%\", height: \"100%\" }}></div>\n  );\n};\n\nexport default Histogram;\n"]}