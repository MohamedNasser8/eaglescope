{"version":3,"sources":["component/VisualTools/Chart/Histogram.js"],"names":["Histogram","data","fields","id","binsCount","filterData","filters","filterAdded","svgRef","x","d3","scaleLinear","y","Scales","setScales","hist","histogram","bins","setHistogram","margin","top","right","bottom","left","setTimeout","console","log","rect","current","getBoundingClientRect","innerWidth","width","innerHeight","height","svg","select","append","attr","domain","max","d","range","value","thresholds","ticks","length","brush","brushX","extent","on","event","selection","x0","x1","field","operation","values","invert","call","axisBottom","view","axisLeft","selectAll","join","Math","style","transition","duration"],"mappings":"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","file":"Histogram.cf26dbbf.js","sourceRoot":"../source","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { numFixed } from \"../../../common/utils.js\";\nimport * as d3 from \"d3\";\n\n/**\n * @function Histogram\n * @description Creates an interactive histogram chart\n *              User can select specific range of x by brushing\n * @param {Object} data - total data without filtering\n * @param {Array} fields - contains filed to creat histogram on\n * @param {String} id - HTML id for the chart\n * @param {Integer} binsCount - number of bins to split data on\n * @param {Object} filterData - data after applying filters \n * @param {Array} filters - current filters\n * @param {Function} filterAdded - handler for adding new filter\n * @returns {Component}\n */\n\nconst Histogram = ({\n  data,\n  fields,\n  id,\n  binsCount,\n  filterData,\n  filters,\n  filterAdded,\n}) => {\n  const svgRef = useRef();\n  const [Scales, setScales] = useState({\n    x: d3.scaleLinear(),\n    y: d3.scaleLinear(),\n  });\n  const [histogram, setHistogram] = useState({\n    hist: d3.histogram(),\n    bins: null,\n  });\n  const margin = { top: 10, right: 10, bottom: 30, left: 40 };\n\n  // initialize svg and draw base histogram\n  useEffect(() => {\n    setTimeout(() => {\n      console.log(\"what\");\n      let rect = svgRef.current.getBoundingClientRect();\n      const innerWidth = rect.width - margin.left - margin.right;\n      const innerHeight = rect.height - margin.top - margin.bottom;\n\n      const svg = d3\n        .select(svgRef.current)\n        .append(\"svg\")\n        .attr(\"width\", rect.width)\n        .attr(\"height\", rect.height)\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      Scales.x\n        .domain([\n          0,\n          d3.max(data, (d) => {\n            return d[fields.x];\n          }),\n        ])\n        .range([0, innerWidth]);\n\n      histogram.hist\n        .value((d) => d[fields.x])\n        .domain(Scales.x.domain())\n        .thresholds(Scales.x.ticks(binsCount));\n\n      histogram.bins = histogram.hist(data);\n\n      Scales.y = d3\n        .scaleLinear()\n        .range([innerHeight, 0])\n        .domain([0, d3.max(histogram.bins, (d) => d.length)]);\n\n      // brush\n      const brush = d3\n        .brushX()\n        .extent([\n          [0, 0],\n          [innerWidth, innerHeight],\n        ])\n        .on(\"end\", () => {\n          if (d3.event.selection) {\n            const [x0, x1] = [d3.event.selection[0], d3.event.selection[1]];\n            filterAdded([\n              {\n                id: id,\n                field: fields.x,\n                operation: \"range\",\n                values: [\n                  numFixed(Scales.x.invert(x0)),\n                  numFixed(Scales.x.invert(x1)),\n                ],\n              },\n            ]);\n          }\n        });\n      svg.append(\"g\").call(brush);\n\n      // draw x-axis\n      svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + innerHeight + \")\")\n        .call(d3.axisBottom(Scales.x));\n\n      // draw y-axis\n      const view = svg\n        .append(\"g\")\n        .call(d3.axisLeft(Scales.y))\n        .append(\"g\")\n        .attr(\"class\", \"hist-area\");\n\n      // draw histogram rectangles\n      view\n        .selectAll(\".bar\")\n        .data(histogram.bins)\n        .join(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", 1)\n        .attr(\"transform\", function (d) {\n          return \"translate(\" + Scales.x(d.x0) + \",\" + Scales.y(d.length) + \")\";\n        })\n        .attr(\"width\", function (d) {\n          return Math.max(Scales.x(d.x1) - Scales.x(d.x0) - 1, 0);\n        })\n        .attr(\"height\", function (d) {\n          return innerHeight - Scales.y(d.length);\n        })\n        .style(\"fill\", \"#87CEFA\");\n    }, 100);\n  }, []);\n\n  // draw filtered histogram\n  useEffect(() => {\n    setTimeout(() => {\n      const rect = svgRef.current.getBoundingClientRect();\n      const innerHeight = rect.height - margin.top - margin.bottom;\n\n      let bins = histogram.bins;\n      if (filters.length != 0) {\n        bins = histogram.hist(filterData);\n      }\n\n      d3.select(svgRef.current)\n        .selectAll(\".hist-area\")\n        .selectAll(\".bar-f\")\n        .data(bins)\n        .join(\"rect\")\n        .attr(\"class\", \"bar-f\")\n        .style(\"transform\", \"scale(1, -1)\")\n        .attr(\"x\", (d) => Scales.x(d.x0))\n        .attr(\"y\", (d) => -innerHeight)\n        .transition()\n        .duration(1000)\n        .attr(\"width\", function (d) {\n          return Math.max(Scales.x(d.x1) - Scales.x(d.x0) - 1, 0);\n        })\n        .attr(\"height\", function (d) {\n          return innerHeight - Scales.y(d.length);\n        })\n        .style(\"fill\", \"#4682B4\");\n    }, 100);\n  }, [filterData]);\n  return (\n    <div id={id} ref={svgRef} style={{ width: \"100%\", height: \"100%\" }}></div>\n  );\n};\n\nexport default Histogram;\n"]}